1 rakuten tokyo engineer java web api
2 rakuten tokyo engineer java web api python
3 rakuten tokyo engineer data ruby python

company location postion = clp
other = desp

map (key, value)

key = hash(rakuten+tokyo+engineer) = 0x123
value = set of hash = [0x1, 0x2, 0x3], [0x1, 0x2, 0x3, 0x4], [0x5, 0x6, 0x7] 

first round
- create index map (index, {md5(clp),md5(desp)})
- find 100 top most pattern of clp = map(md5(clp),occurance) -- or using threshold -- O(n)
- in each of 100 top clp, find top 100 desp = map(md5(desp),occurrance) -- or using threshold
- now have 100x100 pattern of most occurance of clp x desp
- start categorize the job from index 1 to all --> map(pattern,count)

Links:
String vs Int key
http://jacksondunstan.com/articles/2527

Super charging your HashMaps
http://www.javaranch.com/journal/2008/08/supercharging-your-hashmaps.html

Java collection big O
http://javadevelopersenior.com/blog/wp-content/uploads/2013/05/java_collections.pdf

Big o cheat sheet
http://bigocheatsheet.com/

Java memory optimization
http://java-performance.info/overview-of-memory-saving-techniques-java/



For LinkedList<E>

get(int index) is O(n)
add(E element) is O(1)
add(int index, E element) is O(n)
remove(int index) is O(n)
Iterator.remove() is O(1) <--- main benefit of LinkedList<E>
ListIterator.add(E element) is O(1) <--- main benefit of LinkedList<E>

For ArrayList<E>

get(int index) is O(1) <--- main benefit of ArrayList<E>
add(E element) is O(1) amortized, but O(n) worst-case since the array must be resized and copied
add(int index, E element) is O(n - index) amortized, but O(n) worst-case (as above)
remove(int index) is O(n - index) (i.e. removing last is O(1))
Iterator.remove() is O(n - index)
ListIterator.add(E element) is O(n - index)

/////////////////////////
89j2r

char c = stream.getChar();

//StringBuffer buffer = new StringBuffer();
int lineCount = 0;
int wordCount = 0;
int charCount = 0;
char pChar = '';

while(c==stream.getChar()!=null){
    //buffer.append(c);
    charCount++;
    if(c=='\n')
        lineCount++;
    if(pChar==''&&!isDelimeter(c))
        wordCount++;
    }else if(isDelimeter(pChar)&&!isDelimeter(c)){
        wordCount++;
    }
    pChar = c;
}

System.out.println("char count="+charCount);
System.out.println("word count="+wordCount);
System.out.println("line count="+lineCount);

//Find #char, #words, #lines

boolean isDelimeter(char c){
    if(c=='\t')
        return true;
    if(c=='\n')
        return true;
    if(c==' ')
        return true;
    return false;
}


 +-----S+
 |      |
 | ---+ |
 |    | |
 +--- +-+
 |      |
 +E-----+
 
 
 class MazeSpace{
     MazeSpaceElement[][] elements;
     int x = 0;
     int y = 0;
     int endX = 1;
     int endY = 1;
     
     boolean goUp(){
         if(elements[x][y].up)
             y--;
     }
     boolean goDown(){
         if(elements[x][y].down)
             y++;
     }
     boolean goLeft(){
         if(elements[x][y].left)
             x--;
     }
     boolean goRight(){
         if(elements[x][y].left)
             x++;
     }
     
     boolean[] availableDir(int x, int y){
         return {elements[x]}
     }
     
     
     MazeSpace(int sx, int sy){
         //initialize all MaseSpaceElement
     }
 }
 
 class MaseSpaceElement{
     boolean up;
     boolean down;
     boolean left;
     boolean right;   
 }
 
 main(){
     MazeSpace space = new MazeSpace(3,3);
     //initialize
     int startx = 3;
     int startx = 3;
     
     //1 get AvailableDir
     //2 when direction has to be selected [di-select], push the maze space element in the stack showing that the cursor was here, which direction took.
     //3 go on one direction, if found deadend trace back by poping out ste pushed stack
     //4 pop until the last [di-select] and choose another way. 
     //5 do until finding the end
 }
 
/// Pre In Post order
 http://lcm.csa.iisc.ernet.in/dsa/node84.html

// Linked list loop
http://stackoverflow.com/questions/2663115/how-to-detect-a-loop-in-a-linked-list

// Combination
http://stackoverflow.com/posts/21720383/revisions
